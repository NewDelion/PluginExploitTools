using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using PMMPLIB.Utils.Linq;
using System.IO;

namespace PMMPLIB.RakLib.Protocol.Internal
{
    public class ClientHandshake : Packet
    {
        public byte GetID() { return 0x13; }

        public IPEndPoint ServerAddress { get; set; }
        public IPEndPoint[] SystemAddresses { get; set; }

        public long SendPing { get; set; }
        public long SendPong { get; set; }

        public ClientHandshake()
        {
            //TODO: コピペしただけなので要検証
            SystemAddresses = new IPEndPoint[]
            {
                new IPEndPoint(IPAddress.Parse("127.0.0.1"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0),
                new IPEndPoint(IPAddress.Parse("0.0.0.0"), 0)
            };
        }

        public void Encode(MemoryStream stream)
        {
            stream.WriteByte(GetID());
            stream.WriteAddress(ServerAddress);
            for (int i = 0; i < 10; ++i)
                stream.WriteAddress(SystemAddresses[i]);
            stream.WriteInt64BE(SendPing);
            stream.WriteInt64BE(SendPong);
        }

        public void Decode(MemoryStream stream)
        {
            stream.ReadByte();//id
            ServerAddress = stream.ReadAddress();
            SystemAddresses = new IPEndPoint[10];
            for (int i = 0; i < 10; ++i)
                SystemAddresses[i] = stream.ReadAddress();
            SendPing = stream.ReadInt64BE();
            SendPong = stream.ReadInt64BE();
        }
    }
}
