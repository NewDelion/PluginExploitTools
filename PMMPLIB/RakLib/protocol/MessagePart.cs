using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PMMPLIB.Utils.Linq;

namespace PMMPLIB.RakLib.protocol
{
    public class MessagePart
    {
        public MessagePartHeader Header { get; private set; }
        public byte[] Buffer { get; set; }

        public MessagePart()
        {
            Header = new MessagePartHeader();
        }

        public void Encode(System.IO.MemoryStream ms)
        {
            byte flags = (byte)Header.reliability;
            ms.WriteByte((byte)((flags << 5) | (Header.hashSplit ? 0x10 : 0x00)));
            ms.WriteInt16BE((short)(Buffer.Length * 8));

            if(Header.reliability == MessagePartHeader.Reliability.Reliable
                || Header.reliability == MessagePartHeader.Reliability.ReliableOrdered
                || Header.reliability == MessagePartHeader.Reliability.ReliableSequenced
                || Header.reliability == MessagePartHeader.Reliability.ReliableWithAckReceipt
                || Header.reliability == MessagePartHeader.Reliability.ReliableOrderedWithAckReceipt
                )
            {
                ms.WriteInt24(Header.messageIndex);
            }

            if(Header.reliability == MessagePartHeader.Reliability.UnreliableSequenced
                || Header.reliability == MessagePartHeader.Reliability.ReliableOrdered
                || Header.reliability == MessagePartHeader.Reliability.ReliableSequenced
                || Header.reliability == MessagePartHeader.Reliability.ReliableOrderedWithAckReceipt
                )
            {
                ms.WriteInt24(Header.orderIndex);
                ms.WriteByte(Header.orderChannel);
            }

            if (Header.hashSplit)
            {
                ms.WriteInt32BE(Header.splitCount);
                ms.WriteInt16BE(Header.splitId);
                ms.WriteInt32BE(Header.splitIndex);
            }

            ms.Write(Buffer);
        }

        public void Decode(System.IO.MemoryStream ms)
        {
            byte flags = unchecked((byte)ms.ReadByte());
            Header.reliability = (MessagePartHeader.Reliability)(flags >> 5);
            Header.hashSplit = (flags & 0x10) != 0x00;
            int length = ms.ReadInt16BE() >> 3;

            if (Header.reliability == MessagePartHeader.Reliability.Reliable
                || Header.reliability == MessagePartHeader.Reliability.ReliableOrdered
                || Header.reliability == MessagePartHeader.Reliability.ReliableSequenced
                || Header.reliability == MessagePartHeader.Reliability.ReliableWithAckReceipt
                || Header.reliability == MessagePartHeader.Reliability.ReliableOrderedWithAckReceipt
                )
            {
                Header.messageIndex = ms.ReadInt24();
            }

            if (Header.reliability == MessagePartHeader.Reliability.UnreliableSequenced
                || Header.reliability == MessagePartHeader.Reliability.ReliableOrdered
                || Header.reliability == MessagePartHeader.Reliability.ReliableSequenced
                || Header.reliability == MessagePartHeader.Reliability.ReliableOrderedWithAckReceipt
                )
            {
                Header.orderIndex = ms.ReadInt24();
                Header.orderChannel = unchecked((byte)ms.ReadByte());
            }

            if (Header.hashSplit)
            {
                Header.splitCount = ms.ReadInt32BE();
                Header.splitId = ms.ReadInt16BE();
                Header.splitIndex = ms.ReadInt32BE();
            }

            Buffer = ms.ReadBytes(length);
        }
    }
}
