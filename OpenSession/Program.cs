using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Net;
using System.Net.Sockets;

namespace OpenSession
{
    static class Ex
    {
        public static void hexdump(this byte[] buffer)
        {
            Console.WriteLine(BitConverter.ToString(buffer).Replace("-", ":"));
        }

        public static void hexdump(this byte[] buffer, string prefix)
        {
            Console.WriteLine(prefix + BitConverter.ToString(buffer).Replace("-", ":"));
        }

        public static byte[] GetBytes(this int target)
        {
            return BitConverter.GetBytes(target);
        }
        public static byte[] GetBytesBe(this int target)
        {
            return BitConverter.GetBytes(target).Reverse().ToArray();
        }

        public static byte[] GetBytes(this short target)
        {
            return BitConverter.GetBytes(target);
        }
        public static byte[] GetBytesBe(this short target)
        {
            return BitConverter.GetBytes(target).Reverse().ToArray();
        }

        public static byte[] GetBytes(this long target)
        {
            return BitConverter.GetBytes(target);
        }
        public static byte[] GetBytesBe(this long target)
        {
            return BitConverter.GetBytes(target).Reverse().ToArray();
        }

        public static void Write(this MemoryStream ms, byte[] buffer)
        {
            ms.Write(buffer, 0, buffer.Length);
        }

        public static byte[] GetBytes(this IPEndPoint address)
        {
            if(address.AddressFamily == AddressFamily.InterNetwork)
            {
                return new byte[] { 0x04 }.Concat(unchecked((int)~address.Address.Address).GetBytes()).Concat(((short)address.Port).GetBytesBe()).ToArray();
            }
            else if(address.AddressFamily == AddressFamily.InterNetworkV6)
            {
                // TODO
            }

            return new byte[0];
        }
    }
    class Program
    {
        static void send(UdpClient client, IPEndPoint target, byte[] payload)
        {
            payload.hexdump("Send: ");
            client.Send(payload, payload.Length, target);
        }

        static void Main(string[] args)
        {
            var server = ReadServerAddress();
            var raklib_client_id = (long)new Random(Environment.TickCount).Next(10000);
            IPEndPoint remote = null;
            using (var client = new UdpClient(19132))
            {
                using (var ms = new MemoryStream())
                {
                    ms.WriteByte(0x05);
                    ms.Write(new byte[] { 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34, 0x56, 0x78 });
                    ms.WriteByte(0x06);
                    ms.Write(new byte[1447]);
                    send(client, server, ms.ToArray());
                    client.Receive(ref remote).hexdump("Receive: ");
                }
                using (var ms = new MemoryStream())
                {
                    ms.WriteByte(0x07);
                    ms.Write(new byte[] { 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34, 0x56, 0x78 });
                    ms.Write(server.GetBytes());
                    ms.Write(((short)1465).GetBytesBe());
                    ms.Write(raklib_client_id.GetBytesBe());
                    send(client, server, ms.ToArray());
                    client.Receive(ref remote).hexdump("Receive: ");
                }
            }

            Console.WriteLine();//for debug point
        }

        static IPEndPoint ReadServerAddress()
        {
            IPAddress addr = null;
            int port;
            while (true)
            {
                Console.Clear();
                Console.Write("Server IP   : ");
                if (IPAddress.TryParse(Console.ReadLine(), out addr))
                    break;
                Console.WriteLine("[ERROR] IPアドレスを正しく入力してください\n");
                Console.ReadKey(true);
            }

            while (true)
            {
                Console.Clear();
                Console.WriteLine("Server IP   : {0}", addr.ToString());
                Console.Write("Server Port : ");
                if (int.TryParse(Console.ReadLine(), out port) && port >= 0)
                    break;
                Console.WriteLine("[ERROR] ポートを正しく入力してください");
                Console.ReadKey(true);
            }

            Console.WriteLine();

            return new IPEndPoint(addr, port);
        }
    }
}
